# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-23 09:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/developapps/wallet.md:3
msgid "Audience: Architects, application and smart contract developers"
msgstr ""

#: ../../source/developapps/wallet.md:5
msgid "A wallet contains a set of user identities. An application run by a user selects one of these identities when it connects to a channel. Access rights to channel resources, such as the ledger, are determined using this identity in combination with an MSP."
msgstr ""

#: ../../source/developapps/wallet.md:10
msgid "In this topic, we're going to cover:"
msgstr ""

#: ../../source/developapps/wallet.md:19
msgid "When an application connects to a network channel such as PaperNet, it selects a user identity to do so, for example ID1. The channel MSPs associate ID1 with a role within a particular organization, and this role will ultimately determine the application's rights over channel resources. For example, ID1 might identify a user as a member of the MagnetoCorp organization who can read and write to the ledger, whereas ID2 might identify an administrator in MagnetoCorp who can add a new organization to a consortium."
msgstr ""

#: ../../source/developapps/wallet.md:27
msgid "wallet.scenario Two users, Isabella and Balaji have wallets containing different identities they can use to connect to different network channels, PaperNet and BondNet."
msgstr ""

#: ../../source/developapps/wallet.md:31
msgid "Consider the example of two users; Isabella from MagnetoCorp and Balaji from DigiBank.  Isabella is going to use App 1 to invoke a smart contract in PaperNet and a different smart contract in BondNet.  Similarly, Balaji is going to use App 2 to invoke smart contracts, but only in PaperNet. (It's very easy for applications to access multiple networks and multiple smart contracts within them.)"
msgstr ""

#: ../../source/developapps/wallet.md:38
msgid "See how:"
msgstr ""

#: ../../source/developapps/wallet.md:72
msgid "There are different types of wallets according to where they store their identities:"
msgstr ""

#: ../../source/developapps/wallet.md:75
msgid "wallet.types The four different types of wallet: File  system, In-memory, Hardware Security Module (HSM) and CouchDB."
msgstr ""

#: ../../source/developapps/wallet.md:123
msgid "A single wallet can hold multiple identities, each issued by a particular Certificate Authority. Each identity has a standard structure comprising a descriptive label, an X.509 certificate containing a public key, a private key, and some Fabric-specific metadata. Different wallet types map this structure appropriately to their storage mechanism."
msgstr ""

#: ../../source/developapps/wallet.md:129
msgid "wallet.structure A Fabric wallet can hold multiple identities with certificates issued by a different Certificate Authority. Identities comprise certificate, private key and Fabric metadata."
msgstr ""

#: ../../source/developapps/wallet.md:133
msgid "There's a couple of key class methods that make it easy to manage wallets and identities:"
msgstr ""

#: ../../source/developapps/wallet.md:142
msgid "See how the X509WalletMixin.createIdentity() method creates an identity that has metadata Org1MSP, a certificate and a private key. See how wallet.import() adds this identity to the wallet with a particular identityLabel."
msgstr ""

#: ../../source/developapps/wallet.md:148
msgid "The Gateway class only requires the mspid metadata to be set for an identity -- Org1MSP in the above example. It currently uses this value to identify particular peers from a connection profile, for example when a specific notification strategy is requested. In the DigiBank gateway file networkConnection.yaml, see how Org1MSP notifications will be associated with peer0.org1.example.com:"
msgstr ""

#: ../../source/developapps/wallet.md:164
msgid "You really don't need to worry about the internal structure of the different wallet types, but if you're interested, navigate to a user identity folder in the commercial paper sample:"
msgstr ""

#: ../../source/developapps/wallet.md:177
msgid "You can examine these files, but as discussed, it's easier to use the SDK to manipulate these data."
msgstr ""

#: ../../source/developapps/wallet.md:182
msgid "The different wallet classes are derived from a common Wallet base class which provides a standard set of APIs to manage identities. It means that applications can be made independent of the underlying wallet storage mechanism; for example, File system and HSM wallets are handled in a very similar way."
msgstr ""

#: ../../source/developapps/wallet.md:189
msgid "wallet.operations Wallets follow a lifecycle: they can be created or opened, and identities can be read, added, deleted and exported."
msgstr ""

#: ../../source/developapps/wallet.md:193
msgid "An application can use a wallet according to a simple lifecycle. Wallets can be opened or created, and subsequently identities can be added, read, updated, deleted and exported. Spend a little time on the different Wallet methods in the JSDOC to see how they work; the commercial paper tutorial provides a nice example in addToWallet.js:"
msgstr ""

#: ../../source/developapps/wallet.md:213
msgid "Notice how:"
msgstr ""

#: ../../source/developapps/wallet.md:226
msgid "That's everything you need to know about wallets. You've seen how they hold identities that are used by applications on behalf of users to access Fabric network resources. There are different types of wallets available depending on your application and security needs, and a simple set of APIs to help applications manage wallets and the identities within them."
msgstr ""

