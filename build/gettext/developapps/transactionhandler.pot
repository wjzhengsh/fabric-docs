# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-23 09:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/developapps/transactionhandler.md:3
msgid "Audience: Architects, Application and smart contract developers"
msgstr ""

#: ../../source/developapps/transactionhandler.md:5
msgid "Transaction handlers allow smart contract developers to define common processing at key points during the interaction between an application and a smart contract. Transaction handlers are optional but, if defined, they will receive control before or after every transaction in a smart contract is invoked. There is also a specific handler which receives control when a request is made to invoke a transaction not defined in a smart contract."
msgstr ""

#: ../../source/developapps/transactionhandler.md:12
msgid "Here's an example of transaction handlers for the commercial paper smart contract sample:"
msgstr ""

#: ../../source/developapps/transactionhandler.md:15
msgid "develop.transactionhandler"
msgstr ""

#: ../../source/developapps/transactionhandler.md:17
msgid "Before, After and Unknown transaction handlers. In this example, BeforeFunction() is called before the issue, buy and redeem transactions. AfterFunction() is called after the issue, buy and redeem transactions. UnknownFunction() is only called if a request is made to invoke a transaction not defined in the smart contract.  (The diagram is simplified by not repeating BeforeFunction and AfterFunction boxes for each transaction."
msgstr ""

#: ../../source/developapps/transactionhandler.md:27
msgid "There are three types of transaction handlers which cover different aspects of the interaction between an application and a smart contract:"
msgstr ""

#: ../../source/developapps/transactionhandler.md:49
msgid "Transaction handlers are added to the smart contract as methods with well defined names.  Here's an example which adds a handler of each type:"
msgstr ""

#: ../../source/developapps/transactionhandler.md:75
msgid "The form of a transaction handler definition is the similar for all handler types, but notice how the afterTransaction(ctx, result) also receives any result returned by the transaction."
msgstr ""

#: ../../source/developapps/transactionhandler.md:81
msgid "Once a handler has been added to the smart contract, it can be invoked during transaction processing. During processing, the handler receives ctx, the transaction context, performs some processing, and returns control as it completes. Processing continues as follows:"
msgstr ""

#: ../../source/developapps/transactionhandler.md:103
msgid "If the handler requires access to the function and parameters, then it is easy to do this:"
msgstr ""

#: ../../source/developapps/transactionhandler.md:117
msgid "It is only possible to define at most one handler of each type for a smart contract. If a smart contract needs to invoke multiple functions during before, after or unknown handling, it should coordinate this from within the appropriate function."
msgstr ""

