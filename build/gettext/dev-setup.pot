# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-16 11:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/dev-setup/build.rst:2
msgid "Building Hyperledger Fabric"
msgstr ""

#: ../../source/dev-setup/build.rst:4
msgid "The following instructions assume that you have already set up your :doc:`development environment <devenv>`."
msgstr ""

#: ../../source/dev-setup/build.rst:7
msgid "To build Hyperledger Fabric:"
msgstr ""

#: ../../source/dev-setup/build.rst:15
msgid "Running the unit tests"
msgstr ""

#: ../../source/dev-setup/build.rst:17
msgid "Before running the unit tests, a PKCS #11 cryptographic token implementation must be installed and configured. The PKCS #11 API is used by the bccsp component of Fabric to interact with devices, such as hardware security modules (HSMs), that store cryptographic information and perform cryptographic computations. For test environments, SoftHSM can be used to satisfy this requirement."
msgstr ""

#: ../../source/dev-setup/build.rst:24
msgid "SoftHSM can be installed with the following commands:"
msgstr ""

#: ../../source/dev-setup/build.rst:32
msgid "Once SoftHSM is installed, additional configuration may be required. For example, the default configuration file stores token data in a system directory that unprivileged users are unable to write to."
msgstr ""

#: ../../source/dev-setup/build.rst:36
msgid "Configuration typically involves copying ``/etc/softhsm2.conf`` to ``$HOME/.config/softhsm2/softhsm2.conf`` and changing ``directories.tokendir`` to an appropriate location. Please see the man page for ``softhsm2.conf`` for details."
msgstr ""

#: ../../source/dev-setup/build.rst:41
msgid "After SoftHSM has been configured, the following command can be used to initialize the required token:"
msgstr ""

#: ../../source/dev-setup/build.rst:48
msgid "If the test cannot find libsofthsm2.so in your environment, specify its path, the PIN and the label of the token through environment variables. For example, on macOS:"
msgstr ""

#: ../../source/dev-setup/build.rst:58
msgid "Use the following sequence to run all unit tests:"
msgstr ""

#: ../../source/dev-setup/build.rst:65
msgid "To run a subset of tests, set the TEST_PKGS environment variable. Specify a list of packages (separated by space), for example:"
msgstr ""

#: ../../source/dev-setup/build.rst:73
msgid "To run a specific test use the ``-run RE`` flag where RE is a regular expression that matches the test case name. To run tests with verbose output use the ``-v`` flag. For example, to run the ``TestGetFoo`` test case, change to the directory containing the ``foo_test.go`` and call/execute"
msgstr ""

#: ../../source/dev-setup/build.rst:85
msgid "Running Node.js Client SDK Unit Tests"
msgstr ""

#: ../../source/dev-setup/build.rst:87
msgid "You must also run the Node.js unit tests to ensure that the Node.js client SDK is not broken by your changes. To run the Node.js unit tests, follow the instructions `here <https://github.com/hyperledger/fabric-sdk-node/blob/master/README.md>`__."
msgstr ""

#: ../../source/dev-setup/build.rst:93
msgid "Configuration"
msgstr ""

#: ../../source/dev-setup/build.rst:95
msgid "Configuration utilizes the `viper <https://github.com/spf13/viper>`__ and `cobra <https://github.com/spf13/cobra>`__ libraries."
msgstr ""

#: ../../source/dev-setup/build.rst:98
msgid "There is a **core.yaml** file that contains the configuration for the peer process. Many of the configuration settings can be overridden on the command line by setting ENV variables that match the configuration setting, but by prefixing with *'CORE\\_'*. For example, logging level manipulation through the environment is shown below:"
msgstr ""

#: ../../source/dev-setup/devenv.rst:2
msgid "Setting up the development environment"
msgstr ""

#: ../../source/dev-setup/devenv.rst:5
msgid "Prerequisites"
msgstr ""

#: ../../source/dev-setup/devenv.rst:7
msgid "`Git client <https://git-scm.com/downloads>`__"
msgstr ""

#: ../../source/dev-setup/devenv.rst:8
msgid "`Go <https://golang.org/dl/>`__ - version 1.11.x"
msgstr ""

#: ../../source/dev-setup/devenv.rst:9
msgid "(macOS) `Xcode <https://itunes.apple.com/us/app/xcode/id497799835?mt=12>`__ must be installed"
msgstr ""

#: ../../source/dev-setup/devenv.rst:12
msgid "`Docker <https://www.docker.com/get-docker>`__ - 17.06.2-ce or later"
msgstr ""

#: ../../source/dev-setup/devenv.rst:13
msgid "`Docker Compose <https://docs.docker.com/compose/>`__ - 1.14.0 or later"
msgstr ""

#: ../../source/dev-setup/devenv.rst:14
msgid "(macOS) you may need to install gnutar, as macOS comes with bsdtar as the default, but the build uses some gnutar flags. You can use Homebrew to install it as follows:"
msgstr ""

#: ../../source/dev-setup/devenv.rst:22
msgid "(macOS) `Libtool <https://www.gnu.org/software/libtool/>`__. You can use Homebrew to install it as follows:"
msgstr ""

#: ../../source/dev-setup/devenv.rst:29
msgid "(only if using Vagrant) - `Vagrant <https://www.vagrantup.com/>`__ - 1.9 or later"
msgstr ""

#: ../../source/dev-setup/devenv.rst:31
msgid "(only if using Vagrant) - `VirtualBox <https://www.virtualbox.org/>`__ - 5.0 or later"
msgstr ""

#: ../../source/dev-setup/devenv.rst:33
msgid "BIOS Enabled Virtualization - Varies based on hardware"
msgstr ""

#: ../../source/dev-setup/devenv.rst:35
msgid "Note: The BIOS Enabled Virtualization may be within the CPU or Security settings of the BIOS"
msgstr ""

#: ../../source/dev-setup/devenv.rst:40
msgid "Steps"
msgstr ""

#: ../../source/dev-setup/devenv.rst:43
msgid "Set your GOPATH"
msgstr ""

#: ../../source/dev-setup/devenv.rst:45
msgid "Make sure you have properly setup your Host's `GOPATH environment variable <https://github.com/golang/go/wiki/GOPATH>`__. This allows for both building within the Host and the VM."
msgstr ""

#: ../../source/dev-setup/devenv.rst:49
msgid "In case you installed Go into a different location from the standard one your Go distribution assumes, make sure that you also set `GOROOT environment variable <https://golang.org/doc/install#install>`__."
msgstr ""

#: ../../source/dev-setup/devenv.rst:54
msgid "Note to Windows users"
msgstr ""

#: ../../source/dev-setup/devenv.rst:56
msgid "If you are running Windows, before running any ``git clone`` commands, run the following command."
msgstr ""

#: ../../source/dev-setup/devenv.rst:63
msgid "If ``core.autocrlf`` is set to ``true``, you must set it to ``false`` by running"
msgstr ""

#: ../../source/dev-setup/devenv.rst:70
msgid "If you continue with ``core.autocrlf`` set to ``true``, the ``vagrant up`` command will fail with the error:"
msgstr ""

#: ../../source/dev-setup/devenv.rst:73
msgid "``./setup.sh: /bin/bash^M: bad interpreter: No such file or directory``"
msgstr ""

#: ../../source/dev-setup/devenv.rst:76
msgid "Cloning the Hyperledger Fabric source"
msgstr ""

#: ../../source/dev-setup/devenv.rst:78
msgid "Since Hyperledger Fabric is written in ``Go``, you'll need to clone the source repository to your $GOPATH/src directory. If your $GOPATH has multiple path components, then you will want to use the first one. There's a little bit of setup needed:"
msgstr ""

#: ../../source/dev-setup/devenv.rst:89
msgid "Recall that we are using ``Gerrit`` for source control, which has its own internal git repositories. Hence, we will need to clone from :doc:`Gerrit <../Gerrit/gerrit>`. For brevity, the command is as follows:"
msgstr ""

#: ../../source/dev-setup/devenv.rst:98
msgid "**Note:** Of course, you would want to replace ``LFID`` with your own :doc:`Linux Foundation ID <../Gerrit/lf-account>`."
msgstr ""

