# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-16 11:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/systemchaincode.rst:2
msgid "System Chaincode Plugins"
msgstr ""

#: ../../source/systemchaincode.rst:4
msgid "System chaincodes are specialized chaincodes that run as part of the peer process as opposed to user chaincodes that run in separate docker containers. As such they have more access to resources in the peer and can be used for implementing features that are difficult or impossible to be implemented through user chaincodes. Examples of System Chaincodes include QSCC (Query System Chaincode) for ledger and other Fabric-related queries, CSCC (Configuration System Chaincode) which helps regulate access control, and LSCC (Lifecycle System Chaincode)."
msgstr ""

#: ../../source/systemchaincode.rst:12
msgid "Unlike a user chaincode, a system chaincode is not installed and instantiated using proposals from SDKs or CLI. It is registered and deployed by the peer at start-up."
msgstr ""

#: ../../source/systemchaincode.rst:16
msgid "System chaincodes can be linked to a peer in two ways: statically, and dynamically using Go plugins. This tutorial will outline how to develop and load system chaincodes as plugins."
msgstr ""

#: ../../source/systemchaincode.rst:21
msgid "Developing Plugins"
msgstr ""

#: ../../source/systemchaincode.rst:23
msgid "A system chaincode is a program written in `Go <https://golang.org>`_ and loaded using the Go `plugin <https://golang.org/pkg/plugin>`_ package."
msgstr ""

#: ../../source/systemchaincode.rst:26
msgid "A plugin includes a main package with exported symbols and is built with the command ``go build -buildmode=plugin``."
msgstr ""

#: ../../source/systemchaincode.rst:29
msgid "Every system chaincode must implement the `Chaincode Interface <https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Chaincode>`_ and export a constructor method that matches the signature ``func New() shim.Chaincode`` in the main package. An example can be found in the repository at ``examples/plugin/scc``."
msgstr ""

#: ../../source/systemchaincode.rst:33
msgid "Existing chaincodes such as the QSCC can also serve as templates for certain features, such as access control, that are typically implemented through system chaincodes. The existing system chaincodes also serve as a reference for best-practices on things like logging and testing."
msgstr ""

#: ../../source/systemchaincode.rst:38
msgid "On imported packages: the Go standard library requires that a plugin must include the same version of imported packages as the host application (Fabric, in this case)."
msgstr ""

#: ../../source/systemchaincode.rst:43
msgid "Configuring Plugins"
msgstr ""

#: ../../source/systemchaincode.rst:45
msgid "Plugins are configured in the ``chaincode.systemPlugin`` section in ``core.yaml``:"
msgstr ""

#: ../../source/systemchaincode.rst:58
msgid "A system chaincode must also be whitelisted in the ``chaincode.system`` section in ``core.yaml``:"
msgstr ""

