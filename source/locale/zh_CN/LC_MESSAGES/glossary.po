# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-16 11:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/glossary.rst:3
msgid "Glossary"
msgstr ""

#: ../../source/glossary.rst:5
msgid ""
"Terminology is important, so that all Hyperledger Fabric users and "
"developers agree on what we mean by each specific term. What is a smart "
"contract for example. The documentation will reference the glossary as "
"needed, but feel free to read the entire thing in one sitting if you "
"like; it's pretty enlightening!"
msgstr ""

#: ../../source/glossary.rst:13
msgid "Anchor Peer"
msgstr ""

#: ../../source/glossary.rst:15
msgid ""
"Used by gossip to make sure peers in different organizations know about "
"each other."
msgstr ""

#: ../../source/glossary.rst:17
msgid ""
"When a configuration block that contains an update to the anchor peers is"
" committed, peers reach out to the anchor peers and learn from them about"
" all of the peers known to the anchor peer(s). Once at least one peer "
"from each organization has contacted an anchor peer, the anchor peer "
"learns about every peer in the channel. Since gossip communication is "
"constant, and because peers always ask to be told about the existence of "
"any peer they don't know about, a common view of membership can be "
"established for a channel."
msgstr ""

#: ../../source/glossary.rst:25
msgid ""
"For example, let's assume we have three organizations---`A`, `B`, `C`--- "
"in the channel and a single anchor peer---`peer0.orgC`--- defined for "
"organization `C`. When `peer1.orgA` (from organization `A`) contacts "
"`peer0.orgC`, it will tell it about `peer0.orgA`. And when at a later "
"time `peer1.orgB` contacts `peer0.orgC`, the latter would tell the former"
" about `peer0.orgA`. From that point forward, organizations `A` and `B` "
"would start exchanging membership information directly without any "
"assistance from `peer0.orgC`."
msgstr ""

#: ../../source/glossary.rst:33
msgid ""
"As communication across organizations depends on gossip in order to work,"
" there must be at least one anchor peer defined in the channel "
"configuration. It is strongly recommended that every organization "
"provides its own set of anchor peers for high availability and "
"redundancy."
msgstr ""

#: ../../source/glossary.rst:41
msgid "ACL"
msgstr ""

#: ../../source/glossary.rst:43
msgid ""
"An ACL, or Access Control List, associates access to specific peer "
"resources (such as system chaincode APIs or event services) to a Policy_ "
"(which specifies how many and what types of organizations or roles are "
"required). The ACL is part of a channel's configuration. It is therefore "
"persisted in the channel's configuration blocks, and can be updated using"
" the standard configuration update mechanism."
msgstr ""

#: ../../source/glossary.rst:50
msgid ""
"An ACL is formatted as a list of key-value pairs, where the key "
"identifies the resource whose access we wish to control, and the value "
"identifies the channel policy (group) that is allowed to access it. For "
"example ``lscc/GetDeploymentSpec: /Channel/Application/Readers`` defines "
"that the access to the life cycle chaincode ``GetDeploymentSpec`` API "
"(the resource) is accessible by identities which satisfy the "
"``/Channel/Application/Readers`` policy."
msgstr ""

#: ../../source/glossary.rst:58
msgid ""
"A set of default ACLs is provided in the ``configtx.yaml`` file which is "
"used by configtxgen to build channel configurations. The defaults can be "
"set in the top level \"Application\" section of ``configtx.yaml`` or "
"overridden on a per profile basis in the \"Profiles\" section."
msgstr ""

#: ../../source/glossary.rst:67
msgid "Block"
msgstr ""

#: ../../source/glossary.rst:75
msgid "Block B1 is linked to block B0. Block B2 is linked to block B1."
msgstr ""

#: ../../source/glossary.rst:79
msgid ""
"A block contains an ordered set of transactions. It is cryptographically "
"linked to the preceding block, and in turn it is linked to be subsequent "
"blocks. The first block in such a chain of blocks is called the **genesis"
" block**. Blocks are created by the ordering system, and validated by "
"peers."
msgstr ""

#: ../../source/glossary.rst:89
msgid "Chain"
msgstr ""

#: ../../source/glossary.rst:97
msgid "Blockchain B contains blocks 0, 1, 2."
msgstr ""

#: ../../source/glossary.rst:101
msgid ""
"The ledger's chain is a transaction log structured as hash-linked blocks "
"of transactions. Peers receive blocks of transactions from the ordering "
"service, mark the block's transactions as valid or invalid based on "
"endorsement policies and concurrency violations, and append the block to "
"the hash chain on the peer's file system."
msgstr ""

#: ../../source/glossary.rst:110
msgid "Chaincode"
msgstr ""

#: ../../source/glossary.rst:112
msgid "See Smart-Contract_."
msgstr ""

#: ../../source/glossary.rst:118
msgid "Channel"
msgstr ""

#: ../../source/glossary.rst:126
msgid "Channel C connects application A1, peer P2 and ordering service O1."
msgstr ""

#: ../../source/glossary.rst:130
msgid ""
"A channel is a private blockchain overlay which allows for data isolation"
" and confidentiality. A channel-specific ledger is shared across the "
"peers in the channel, and transacting parties must be properly "
"authenticated to a channel in order to interact with it.  Channels are "
"defined by a Configuration-Block_."
msgstr ""

#: ../../source/glossary.rst:140
msgid "Commit"
msgstr ""

#: ../../source/glossary.rst:142
msgid ""
"Each Peer_ on a channel validates ordered blocks of transactions and then"
" commits (writes/appends) the blocks to its replica of the channel "
"Ledger_. Peers also mark each transaction in each block as valid or "
"invalid."
msgstr ""

#: ../../source/glossary.rst:150
msgid "Concurrency Control Version Check"
msgstr ""

#: ../../source/glossary.rst:152
msgid ""
"Concurrency Control Version Check is a method of keeping state in sync "
"across peers on a channel. Peers execute transactions in parallel, and "
"before commitment to the ledger, peers check that the data read at "
"execution time has not changed. If the data read for the transaction has "
"changed between execution time and commitment time, then a Concurrency "
"Control Version Check violation has occurred, and the transaction is "
"marked as invalid on the ledger and values are not updated in the state "
"database."
msgstr ""

#: ../../source/glossary.rst:163
msgid "Configuration Block"
msgstr ""

#: ../../source/glossary.rst:165
msgid ""
"Contains the configuration data defining members and policies for a "
"system chain (ordering service) or channel. Any configuration "
"modifications to a channel or overall network (e.g. a member leaving or "
"joining) will result in a new configuration block being appended to the "
"appropriate chain. This block will contain the contents of the genesis "
"block, plus the delta."
msgstr ""

#: ../../source/glossary.rst:174
msgid "Consensus"
msgstr ""

#: ../../source/glossary.rst:176
msgid ""
"A broader term overarching the entire transactional flow, which serves to"
" generate an agreement on the order and to confirm the correctness of the"
" set of transactions constituting a block."
msgstr ""

#: ../../source/glossary.rst:183
msgid "Consortium"
msgstr ""

#: ../../source/glossary.rst:185
msgid ""
"A consortium is a collection of non-orderer organizations on the "
"blockchain network. These are the organizations that form and join "
"channels and that own peers. While a blockchain network can have multiple"
" consortia, most blockchain networks have a single consortium. At channel"
" creation time, all organizations added to the channel must be part of a "
"consortium. However, an organization that is not defined in a consortium "
"may be added to an existing channel."
msgstr ""

#: ../../source/glossary.rst:195
msgid "Current State"
msgstr ""

#: ../../source/glossary.rst:197
msgid "See World-State_."
msgstr ""

#: ../../source/glossary.rst:202
msgid "Dynamic Membership"
msgstr ""

#: ../../source/glossary.rst:204
msgid ""
"Hyperledger Fabric supports the addition/removal of members, peers, and "
"ordering service nodes, without compromising the operationality of the "
"overall network. Dynamic membership is critical when business "
"relationships adjust and entities need to be added/removed for various "
"reasons."
msgstr ""

#: ../../source/glossary.rst:212
msgid "Endorsement"
msgstr ""

#: ../../source/glossary.rst:214
msgid ""
"Refers to the process where specific peer nodes execute a chaincode "
"transaction and return a proposal response to the client application. The"
" proposal response includes the chaincode execution response message, "
"results (read set and write set), and events, as well as a signature to "
"serve as proof of the peer's chaincode execution. Chaincode applications "
"have corresponding endorsement policies, in which the endorsing peers are"
" specified."
msgstr ""

#: ../../source/glossary.rst:224
msgid "Endorsement policy"
msgstr ""

#: ../../source/glossary.rst:226
msgid ""
"Defines the peer nodes on a channel that must execute transactions "
"attached to a specific chaincode application, and the required "
"combination of responses (endorsements). A policy could require that a "
"transaction be endorsed by a minimum number of endorsing peers, a minimum"
" percentage of endorsing peers, or by all endorsing peers that are "
"assigned to a specific chaincode application. Policies can be curated "
"based on the application and the desired level of resilience against "
"misbehavior (deliberate or not) by the endorsing peers. A transaction "
"that is submitted must satisfy the endorsement policy before being marked"
" as valid by committing peers. A distinct endorsement policy for install "
"and instantiate transactions is also required."
msgstr ""

#: ../../source/glossary.rst:239
msgid "Hyperledger Fabric CA"
msgstr ""

#: ../../source/glossary.rst:241
msgid ""
"Hyperledger Fabric CA is the default Certificate Authority component, "
"which issues PKI-based certificates to network member organizations and "
"their users. The CA issues one root certificate (rootCert) to each member"
" and one enrollment certificate (ECert) to each authorized user."
msgstr ""

#: ../../source/glossary.rst:249
msgid "Genesis Block"
msgstr ""

#: ../../source/glossary.rst:251
msgid ""
"The configuration block that initializes the ordering service, or serves "
"as the first block on a chain."
msgstr ""

#: ../../source/glossary.rst:257
msgid "Gossip Protocol"
msgstr ""

#: ../../source/glossary.rst:259
msgid ""
"The gossip data dissemination protocol performs three functions: 1) "
"manages peer discovery and channel membership; 2) disseminates ledger "
"data across all peers on the channel; 3) syncs ledger state across all "
"peers on the channel. Refer to the :doc:`Gossip <gossip>` topic for more "
"details."
msgstr ""

#: ../../source/glossary.rst:268
msgid "Initialize"
msgstr ""

#: ../../source/glossary.rst:270
msgid "A method to initialize a chaincode application."
msgstr ""

#: ../../source/glossary.rst:273
msgid "Install"
msgstr ""

#: ../../source/glossary.rst:275
msgid "The process of placing a chaincode on a peer's file system."
msgstr ""

#: ../../source/glossary.rst:278
msgid "Instantiate"
msgstr ""

#: ../../source/glossary.rst:280
msgid ""
"The process of starting and initializing a chaincode application on a "
"specific channel. After instantiation, peers that have the chaincode "
"installed can accept chaincode invocations."
msgstr ""

#: ../../source/glossary.rst:287
msgid "Invoke"
msgstr ""

#: ../../source/glossary.rst:289
msgid ""
"Used to call chaincode functions. A client application invokes chaincode "
"by sending a transaction proposal to a peer. The peer will execute the "
"chaincode and return an endorsed proposal response to the client "
"application. The client application will gather enough proposal responses"
" to satisfy an endorsement policy, and will then submit the transaction "
"results for ordering, validation, and commit. The client application may "
"choose not to submit the transaction results. For example if the invoke "
"only queried the ledger, the client application typically would not "
"submit the read-only transaction, unless there is desire to log the read "
"on the ledger for audit purpose. The invoke includes a channel "
"identifier, the chaincode function to invoke, and an array of arguments."
msgstr ""

#: ../../source/glossary.rst:303
msgid "Leading Peer"
msgstr ""

#: ../../source/glossary.rst:305
msgid ""
"Each Organization_ can own multiple peers on each channel that they "
"subscribe to. One or more of these peers should serve as the leading peer"
" for the channel, in order to communicate with the network ordering "
"service on behalf of the organization. The ordering service delivers "
"blocks to the leading peer(s) on a channel, who then distribute them to "
"other peers within the same organization."
msgstr ""

#: ../../source/glossary.rst:316
msgid "Ledger"
msgstr ""

#: ../../source/glossary.rst:324
msgid "A Ledger, 'L'"
msgstr ""

#: ../../source/glossary.rst:327
msgid ""
"A ledger consists of two distinct, though related, parts -- a "
"\"blockchain\" and the \"state database\", also known as \"world state\"."
" Unlike other ledgers, blockchains are **immutable** -- that is, once a "
"block has been added to the chain, it cannot be changed. In contrast, the"
" \"world state\" is a database containing the current value of the set of"
" key-value pairs that have been added, modified or deleted by the set of "
"validated and committed transactions in the blockchain."
msgstr ""

#: ../../source/glossary.rst:335
msgid ""
"It's helpful to think of there being one **logical** ledger for each "
"channel in the network. In reality, each peer in a channel maintains its "
"own copy of the ledger -- which is kept consistent with every other "
"peer's copy through a process called **consensus**. The term "
"**Distributed Ledger Technology** (**DLT**) is often associated with this"
" kind of ledger -- one that is logically singular, but has many identical"
" copies distributed across a set of network nodes (peers and the ordering"
" service)."
msgstr ""

#: ../../source/glossary.rst:346
msgid "Member"
msgstr ""

#: ../../source/glossary.rst:348
msgid "See Organization_."
msgstr ""

#: ../../source/glossary.rst:353
msgid "Membership Service Provider"
msgstr ""

#: ../../source/glossary.rst:361
msgid "An MSP, 'ORG.MSP'"
msgstr ""

#: ../../source/glossary.rst:364
msgid ""
"The Membership Service Provider (MSP) refers to an abstract component of "
"the system that provides credentials to clients, and peers for them to "
"participate in a Hyperledger Fabric network. Clients use these "
"credentials to authenticate their transactions, and peers use these "
"credentials to authenticate transaction processing results "
"(endorsements). While strongly connected to the transaction processing "
"components of the systems, this interface aims to have membership "
"services components defined, in such a way that alternate implementations"
" of this can be smoothly plugged in without modifying the core of "
"transaction processing components of the system."
msgstr ""

#: ../../source/glossary.rst:377
msgid "Membership Services"
msgstr ""

#: ../../source/glossary.rst:379
msgid ""
"Membership Services authenticates, authorizes, and manages identities on "
"a permissioned blockchain network. The membership services code that runs"
" in peers and orderers both authenticates and authorizes blockchain "
"operations.  It is a PKI-based implementation of the Membership Services "
"Provider (MSP) abstraction."
msgstr ""

#: ../../source/glossary.rst:387
msgid "Ordering Service"
msgstr ""

#: ../../source/glossary.rst:389
msgid ""
"A defined collective of nodes that orders transactions into a block.  The"
" ordering service exists independent of the peer processes and orders "
"transactions on a first-come-first-serve basis for all channel's on the "
"network.  The ordering service is designed to support pluggable "
"implementations beyond the out-of-the-box SOLO and Kafka varieties. The "
"ordering service is a common binding for the overall network; it contains"
" the cryptographic identity material tied to each Member_."
msgstr ""

#: ../../source/glossary.rst:399
msgid "Organization"
msgstr ""

#: ../../source/glossary.rst:410
msgid "An organization, 'ORG'"
msgstr ""

#: ../../source/glossary.rst:413
msgid ""
"Also known as \"members\", organizations are invited to join the "
"blockchain network by a blockchain service provider. An organization is "
"joined to a network by adding its Membership Service Provider (MSP_) to "
"the network. The MSP defines how other members of the network may verify "
"that signatures (such as those over transactions) were generated by a "
"valid identity, issued by that organization. The particular access rights"
" of identities within an MSP are governed by policies which are also "
"agreed upon when the organization is joined to the network. An "
"organization can be as large as a multi-national corporation or as small "
"as an individual. The transaction endpoint of an organization is a Peer_."
" A collection of organizations form a Consortium_. While all of the "
"organizations on a network are members, not every organization will be "
"part of a consortium."
msgstr ""

#: ../../source/glossary.rst:427
msgid "Peer"
msgstr ""

#: ../../source/glossary.rst:435
msgid "A peer, 'P'"
msgstr ""

#: ../../source/glossary.rst:437
msgid ""
"A network entity that maintains a ledger and runs chaincode containers in"
" order to perform read/write operations to the ledger.  Peers are owned "
"and maintained by members."
msgstr ""

#: ../../source/glossary.rst:443
msgid "Policy"
msgstr ""

#: ../../source/glossary.rst:445
msgid ""
"Policies are expressions composed of properties of digital identities, "
"for example: ``Org1.Peer OR Org2.Peer``. They are used to restrict access"
" to resources on a blockchain network. For instance, they dictate who can"
" read from or write to a channel, or who can use a specific chaincode API"
" via an ACL_. Policies may be defined in ``configtx.yaml`` prior to "
"bootstrapping an ordering service or creating a channel, or they can be "
"specified when instantiating chaincode on a channel. A default set of "
"policies ship in the sample ``configtx.yaml`` which will be appropriate "
"for most networks."
msgstr ""

#: ../../source/glossary.rst:457
msgid "Private Data"
msgstr ""

#: ../../source/glossary.rst:459
msgid ""
"Confidential data that is stored in a private database on each authorized"
" peer, logically separate from the channel ledger data. Access to this "
"data is restricted to one or more organizations on a channel via a "
"private data collection definition. Unauthorized organizations will have "
"a hash of the private data on the channel ledger as evidence of the "
"transaction data. Also, for further privacy, hashes of the private data "
"go through the Ordering-Service_, not the private data itself, so this "
"keeps private data confidential from Orderer."
msgstr ""

#: ../../source/glossary.rst:471
msgid "Private Data Collection (Collection)"
msgstr ""

#: ../../source/glossary.rst:473
msgid ""
"Used to manage confidential data that two or more organizations on a "
"channel want to keep private from other organizations on that channel. "
"The collection definition describes a subset of organizations on a "
"channel entitled to store a set of private data, which by extension "
"implies that only these organizations can transact with the private data."
msgstr ""

#: ../../source/glossary.rst:482
msgid "Proposal"
msgstr ""

#: ../../source/glossary.rst:484
msgid ""
"A request for endorsement that is aimed at specific peers on a channel. "
"Each proposal is either an instantiate or an invoke (read/write) request."
msgstr ""

#: ../../source/glossary.rst:490
msgid "Query"
msgstr ""

#: ../../source/glossary.rst:492
msgid ""
"A query is a chaincode invocation which reads the ledger current state "
"but does not write to the ledger. The chaincode function may query "
"certain keys on the ledger, or may query for a set of keys on the ledger."
" Since queries do not change ledger state, the client application will "
"typically not submit these read-only transactions for ordering, "
"validation, and commit. Although not typical, the client application can "
"choose to submit the read-only transaction for ordering, validation, and "
"commit, for example if the client wants auditable proof on the ledger "
"chain that it had knowledge of specific ledger state at a certain point "
"in time."
msgstr ""

#: ../../source/glossary.rst:504
msgid "Software Development Kit (SDK)"
msgstr ""

#: ../../source/glossary.rst:506
msgid ""
"The Hyperledger Fabric client SDK provides a structured environment of "
"libraries for developers to write and test chaincode applications. The "
"SDK is fully configurable and extensible through a standard interface. "
"Components, including cryptographic algorithms for signatures, logging "
"frameworks and state stores, are easily swapped in and out of the SDK. "
"The SDK provides APIs for transaction processing, membership services, "
"node traversal and event handling."
msgstr ""

#: ../../source/glossary.rst:513
msgid ""
"Currently, the two officially supported SDKs are for Node.js and Java, "
"while three more -- Python, Go and REST -- are not yet official but can "
"still be downloaded and tested."
msgstr ""

#: ../../source/glossary.rst:520
msgid "Smart Contract"
msgstr ""

#: ../../source/glossary.rst:522
msgid ""
"A smart contract is code -- invoked by a client application external to "
"the blockchain network -- that manages access and modifications to a set "
"of key-value pairs in the :ref:`World-State`. In Hyperledger Fabric, "
"smart contracts are referred to as chaincode. Smart contract chaincode is"
" installed onto peer nodes and instantiated to one or more channels."
msgstr ""

#: ../../source/glossary.rst:531
msgid "State Database"
msgstr ""

#: ../../source/glossary.rst:533
msgid ""
"Current state data is stored in a state database for efficient reads and "
"queries from chaincode. Supported databases include levelDB and couchDB."
msgstr ""

#: ../../source/glossary.rst:539
msgid "System Chain"
msgstr ""

#: ../../source/glossary.rst:541
msgid ""
"Contains a configuration block defining the network at a system level. "
"The system chain lives within the ordering service, and similar to a "
"channel, has an initial configuration containing information such as: MSP"
" information, policies, and configuration details.  Any change to the "
"overall network (e.g. a new org joining or a new ordering node being "
"added) will result in a new configuration block being added to the system"
" chain."
msgstr ""

#: ../../source/glossary.rst:548
msgid ""
"The system chain can be thought of as the common binding for a channel or"
" group of channels.  For instance, a collection of financial institutions"
" may form a consortium (represented through the system chain), and then "
"proceed to create channels relative to their aligned and varying business"
" agendas."
msgstr ""

#: ../../source/glossary.rst:556
msgid "Transaction"
msgstr ""

#: ../../source/glossary.rst:564
msgid "A transaction, 'T'"
msgstr ""

#: ../../source/glossary.rst:566
msgid ""
"Invoke or instantiate results that are submitted for ordering, "
"validation, and commit. Invokes are requests to read/write data from the "
"ledger. Instantiate is a request to start and initialize a chaincode on a"
" channel. Application clients gather invoke or instantiate responses from"
" endorsing peers and package the results and endorsements into a "
"transaction that is submitted for ordering, validation, and commit."
msgstr ""

#: ../../source/glossary.rst:575
msgid "World State"
msgstr ""

#: ../../source/glossary.rst:583
msgid "The World State, 'W'"
msgstr ""

#: ../../source/glossary.rst:585
msgid ""
"Also known as the “current state”, the world state is a component of the "
"HyperLedger Fabric :ref:`Ledger`. The world state represents the latest "
"values for all keys included in the chain transaction log. Chaincode "
"executes transaction proposals against world state data because the world"
" state provides direct access to the latest value of these keys rather "
"than having to calculate them by traversing the entire transaction log. "
"The world state will change every time the value of a key changes (for "
"example, when the ownership of a car -- the \"key\" -- is transferred "
"from one owner to another -- the \"value\") or when a new key is added (a"
" car is created). As a result, the world state is critical to a "
"transaction flow, since the current state of a key-value pair must be "
"known before it can be changed. Peers commit the latest values to the "
"ledger world state for each valid transaction included in a processed "
"block."
msgstr ""

