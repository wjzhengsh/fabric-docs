# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-16 11:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/couchdb_tutorial.rst:3
msgid "Using CouchDB"
msgstr ""

#: ../../source/couchdb_tutorial.rst:5
msgid ""
"This tutorial will describe the steps required to use the CouchDB as the "
"state database with Hyperledger Fabric. By now, you should be familiar "
"with Fabric concepts and have explored some of the samples and tutorials."
msgstr ""

#: ../../source/couchdb_tutorial.rst:9
msgid "The tutorial will take you through the following steps:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:11
msgid ":ref:`cdb-enable-couch`"
msgstr ""

#: ../../source/couchdb_tutorial.rst:12
msgid ":ref:`cdb-create-index`"
msgstr ""

#: ../../source/couchdb_tutorial.rst:13
msgid ":ref:`cdb-add-index`"
msgstr ""

#: ../../source/couchdb_tutorial.rst:14
msgid ":ref:`cdb-install-instantiate`"
msgstr ""

#: ../../source/couchdb_tutorial.rst:15
msgid ":ref:`cdb-query`"
msgstr ""

#: ../../source/couchdb_tutorial.rst:16
msgid ":ref:`cdb-best`"
msgstr ""

#: ../../source/couchdb_tutorial.rst:17
msgid ":ref:`cdb-pagination`"
msgstr ""

#: ../../source/couchdb_tutorial.rst:18
msgid ":ref:`cdb-update-index`"
msgstr ""

#: ../../source/couchdb_tutorial.rst:19
msgid ":ref:`cdb-delete-index`"
msgstr ""

#: ../../source/couchdb_tutorial.rst:21
msgid ""
"For a deeper dive into CouchDB refer to :doc:`couchdb_as_state_database` "
"and for more information on the Fabric ledger refer to the `Ledger "
"<ledger/ledger.html>`_ topic. Follow the tutorial below for details on "
"how to leverage CouchDB in your blockchain network."
msgstr ""

#: ../../source/couchdb_tutorial.rst:26
msgid ""
"Throughout this tutorial we will use the `Marbles sample "
"<https://github.com/hyperledger/fabric-"
"samples/blob/master/chaincode/marbles02/go/marbles_chaincode.go>`__ as "
"our use case to demonstrate how to use CouchDB with Fabric and will "
"deploy Marbles to the :doc:`build_network` (BYFN) tutorial network. You "
"should have completed the task :doc:`install`. However, running the BYFN "
"tutorial is not a prerequisite for this tutorial, instead the necessary "
"commands are provided throughout this tutorial to use the network."
msgstr ""

#: ../../source/couchdb_tutorial.rst:34
msgid "Why CouchDB?"
msgstr ""

#: ../../source/couchdb_tutorial.rst:36
msgid ""
"Fabric supports two types of peer databases. LevelDB is the default state"
" database embedded in the peer node and stores chaincode data as simple "
"key-value pairs and supports key, key range, and composite key queries "
"only. CouchDB is an optional alternate state database that supports rich "
"queries when chaincode data values are modeled as JSON. Rich queries are "
"more flexible and efficient against large indexed data stores, when you "
"want to query the actual data value content rather than the keys. CouchDB"
" is a JSON document datastore rather than a pure key-value store "
"therefore enabling indexing of the contents of the documents in the "
"database."
msgstr ""

#: ../../source/couchdb_tutorial.rst:46
msgid ""
"In order to leverage the benefits of CouchDB, namely content-based JSON "
"queries,your data must be modeled in JSON format. You must decide whether"
" to use LevelDB or CouchDB before setting up your network. Switching a "
"peer from using LevelDB to CouchDB is not supported due to data "
"compatibility issues. All peers on the network must use the same database"
" type. If you have a mix of JSON and binary data values, you can still "
"use CouchDB, however the binary values can only be queried based on key, "
"key range, and composite key queries."
msgstr ""

#: ../../source/couchdb_tutorial.rst:57
msgid "Enable CouchDB in Hyperledger Fabric"
msgstr ""

#: ../../source/couchdb_tutorial.rst:59
msgid ""
"CouchDB runs as a separate database process alongside the peer, therefore"
" there are additional considerations in terms of setup, management, and "
"operations. A docker image of `CouchDB "
"<https://hub.docker.com/r/hyperledger/fabric-couchdb/>`__ is available "
"and we recommend that it be run on the same server as the peer. You will "
"need to setup one CouchDB container per peer and update each peer "
"container by changing the configuration found in ``core.yaml`` to point "
"to the CouchDB container. The ``core.yaml`` file must be located in the "
"directory specified by the environment variable FABRIC_CFG_PATH:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:69
msgid ""
"For docker deployments, ``core.yaml`` is pre-configured and located in "
"the peer container ``FABRIC_CFG_PATH`` folder. However when using docker "
"environments, you typically pass environment variables by editing the "
"``docker-compose-couch.yaml``  to override the core.yaml"
msgstr ""

#: ../../source/couchdb_tutorial.rst:74
msgid ""
"For native binary deployments, ``core.yaml`` is included with the release"
" artifact distribution."
msgstr ""

#: ../../source/couchdb_tutorial.rst:77
msgid ""
"Edit the ``stateDatabase`` section of ``core.yaml``. Specify ``CouchDB`` "
"as the ``stateDatabase`` and fill in the associated ``couchDBConfig`` "
"properties. For more details on configuring CouchDB to work with fabric, "
"refer `here <http://hyperledger-"
"fabric.readthedocs.io/en/master/couchdb_as_state_database.html#couchdb-"
"configuration>`__. To view an example of a core.yaml file configured for "
"CouchDB, examine the BYFN ``docker-compose-couch.yaml`` in the "
"``HyperLedger/fabric-samples/first-network`` directory."
msgstr ""

#: ../../source/couchdb_tutorial.rst:87
msgid "Create an index"
msgstr ""

#: ../../source/couchdb_tutorial.rst:89
msgid "Why are indexes important?"
msgstr ""

#: ../../source/couchdb_tutorial.rst:91
msgid ""
"Indexes allow a database to be queried without having to examine every "
"row with every query, making them run faster and more efficiently. "
"Normally, indexes are built for frequently occurring query criteria "
"allowing the data to be queried more efficiently. To leverage the major "
"benefit of CouchDB -- the ability to perform rich queries against JSON "
"data -- indexes are not required, but they are strongly recommended for "
"performance. Also, if sorting is required in a query, CouchDB requires an"
" index of the sorted fields."
msgstr ""

#: ../../source/couchdb_tutorial.rst:101
msgid ""
"Rich queries that do not have an index will work but may throw a warning "
"in the CouchDB log that the index was not found. However, if a rich query"
" includes a sort specification, then an index on that field is required; "
"otherwise, the query will fail and an error will be thrown."
msgstr ""

#: ../../source/couchdb_tutorial.rst:106
msgid ""
"To demonstrate building an index, we will use the data from the `Marbles "
"sample <https://github.com/hyperledger/fabric-"
"samples/blob/master/chaincode/marbles02/go/marbles_chaincode.go>`__. In "
"this example, the Marbles data structure is defined as:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:121
msgid ""
"In this structure, the attributes (``docType``, ``name``, ``color``, "
"``size``, ``owner``) define the ledger data associated with the asset. "
"The attribute ``docType`` is a pattern used in the chaincode to "
"differentiate different data types that may need to be queried "
"separately. When using CouchDB, it recommended to include this "
"``docType`` attribute to distinguish each type of document in the "
"chaincode namespace. (Each chaincode is represented as its own CouchDB "
"database, that is, each chaincode has its own namespace for keys.)"
msgstr ""

#: ../../source/couchdb_tutorial.rst:129
msgid ""
"With respect to the Marbles data structure, ``docType`` is used to "
"identify that this document/asset is a marble asset. Potentially there "
"could be other documents/assets in the chaincode database. The documents "
"in the database are searchable against all of these attribute values."
msgstr ""

#: ../../source/couchdb_tutorial.rst:134
msgid ""
"When defining an index for use in chaincode queries, each one must be "
"defined in its own text file with the extension `*.json` and the index "
"definition must be formatted in the CouchDB index JSON format."
msgstr ""

#: ../../source/couchdb_tutorial.rst:138
msgid "To define an index, three pieces of information are required:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:140
msgid "`fields`: these are the frequently queried fields"
msgstr ""

#: ../../source/couchdb_tutorial.rst:141
msgid "`name`: name of the index"
msgstr ""

#: ../../source/couchdb_tutorial.rst:142
msgid "`type`: always json in this context"
msgstr ""

#: ../../source/couchdb_tutorial.rst:144
msgid "For example, a simple index named ``foo-index`` for a field named ``foo``."
msgstr ""

#: ../../source/couchdb_tutorial.rst:156
msgid ""
"Optionally the design document  attribute ``ddoc`` can be specified on "
"the index definition. A `design document "
"<http://guide.couchdb.org/draft/design.html>`__ is CouchDB construct "
"designed to contain indexes. Indexes can be grouped into design documents"
" for efficiency but CouchDB recommends one index per design document."
msgstr ""

#: ../../source/couchdb_tutorial.rst:162
msgid ""
"When defining an index it is a good practice to include the ``ddoc`` "
"attribute and value along with the index name. It is important to include"
" this attribute to ensure that you can update the index later if needed. "
"Also it gives you the ability to explicitly specify which index to use on"
" a query."
msgstr ""

#: ../../source/couchdb_tutorial.rst:169
msgid ""
"Here is another example of an index definition from the Marbles sample "
"with the index name ``indexOwner`` using multiple fields ``docType`` and "
"``owner`` and includes the ``ddoc`` attribute:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:186
msgid ""
"In the example above, if the design document ``indexOwnerDoc`` does not "
"already exist, it is automatically created when the index is deployed. An"
" index can be constructed with one or more attributes specified in the "
"list of fields and any combination of attributes can be specified. An "
"attribute can exist in multiple indexes for the same docType. In the "
"following example, ``index1`` only includes the attribute ``owner``, "
"``index2`` includes the attributes ``owner and color`` and ``index3`` "
"includes the attributes ``owner, color and size``. Also, notice each "
"index definition has its own ``ddoc`` value, following the CouchDB "
"recommended practice."
msgstr ""

#: ../../source/couchdb_tutorial.rst:226
msgid ""
"In general, you should model index fields to match the fields that will "
"be used in query filters and sorts. For more details on building an index"
" in JSON format refer to the `CouchDB documentation "
"<http://docs.couchdb.org/en/latest/api/database/find.html#db-index>`__."
msgstr ""

#: ../../source/couchdb_tutorial.rst:230
msgid ""
"A final word on indexing, Fabric takes care of indexing the documents in "
"the database using a pattern called ``index warming``. CouchDB does not "
"typically index new or updated documents until the next query. Fabric "
"ensures that indexes stay 'warm' by requesting an index update after "
"every block of data is committed.  This ensures queries are fast because "
"they do not have to index documents before running the query. This "
"process keeps the index current and refreshed every time new records are "
"added to the state database."
msgstr ""

#: ../../source/couchdb_tutorial.rst:242
msgid "Add the index to your chaincode folder"
msgstr ""

#: ../../source/couchdb_tutorial.rst:244
msgid ""
"Once you finalize an index, it is ready to be packaged with your "
"chaincode for deployment by being placed alongside it in the appropriate "
"metadata folder."
msgstr ""

#: ../../source/couchdb_tutorial.rst:247
msgid ""
"If your chaincode installation and instantiation uses the Hyperledger "
"Fabric Node SDK, the JSON index files can be located in any folder as "
"long as it conforms to this `directory structure <https://fabric-sdk-"
"node.github.io/tutorial-metadata-chaincode.html>`__. During the chaincode"
" installation using the client.installChaincode() API, include the "
"attribute (``metadataPath``) in the `installation request <https"
"://fabric-sdk-node.github.io/global.html#ChaincodeInstallRequest>`__. The"
" value of the metadataPath is a string representing the absolute path to "
"the directory structure containing the JSON index file(s)."
msgstr ""

#: ../../source/couchdb_tutorial.rst:255
msgid ""
"Alternatively, if you are using the :doc:`peer-commands` to install and "
"instantiate the chaincode, then the JSON index files must be located "
"under the path ``META-INF/statedb/couchdb/indexes`` which is located "
"inside the directory where the chaincode resides."
msgstr ""

#: ../../source/couchdb_tutorial.rst:260
msgid ""
"The `Marbles sample <https://github.com/hyperledger/fabric-"
"samples/tree/master/chaincode/marbles02/go>`__  below illustrates how the"
" index is packaged with the chaincode which will be installed using the "
"peer commands."
msgstr ""

#: ../../source/couchdb_tutorial.rst:268
msgid "This sample includes one index named indexOwnerDoc:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:276
msgid "Start the network"
msgstr ""

#: ../../source/couchdb_tutorial.rst:278 ../../source/couchdb_tutorial.rst:320
#: ../../source/couchdb_tutorial.rst:340 ../../source/couchdb_tutorial.rst:358
#: ../../source/couchdb_tutorial.rst:437 ../../source/couchdb_tutorial.rst:652
#: ../../source/couchdb_tutorial.rst:705 ../../source/couchdb_tutorial.rst:732
#: ../../source/couchdb_tutorial.rst:751
msgid ":guilabel:`Try it yourself`"
msgstr ""

#: ../../source/couchdb_tutorial.rst:280
msgid ""
"Before installing and instantiating the marbles chaincode, we need to "
"start up the BYFN network. For the sake of this tutorial, we want to "
"operate from a known initial state. The following command will kill any "
"active or stale docker containers and remove previously generated "
"artifacts. Therefore let's run the following command to clean up any "
"previous environments:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:293
msgid ""
"Now start up the BYFN network with CouchDB by running the following "
"command:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:299
msgid ""
"This will create a simple Fabric network consisting of a single channel "
"named `mychannel` with two organizations (each maintaining two peer "
"nodes) and an ordering service while using CouchDB as the state database."
msgstr ""

#: ../../source/couchdb_tutorial.rst:306
msgid "Install and instantiate the Chaincode"
msgstr ""

#: ../../source/couchdb_tutorial.rst:308
msgid ""
"Client applications interact with the blockchain ledger through "
"chaincode. As such we need to install the chaincode on every peer that "
"will execute and endorse our transactions and instantiate the chaincode "
"on the channel. In the previous section, we demonstrated how to package "
"the chaincode so they should be ready for deployment."
msgstr ""

#: ../../source/couchdb_tutorial.rst:314
msgid ""
"Chaincode is installed onto a peer and then instantiated onto the channel"
" using :doc:`peer-commands`."
msgstr ""

#: ../../source/couchdb_tutorial.rst:318
#, python-format
msgid ""
"Use the `peer chaincode install <http://hyperledger-"
"fabric.readthedocs.io/en/master/commands/peerchaincode.html?%20chaincode%20instantiate"
"#peer-chaincode-install>`__ command to install the Marbles chaincode on a"
" peer."
msgstr ""

#: ../../source/couchdb_tutorial.rst:322
msgid ""
"Assuming you have started the BYFN network, navigate into the CLI "
"container using the command:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:329
msgid ""
"Use the following command to install the Marbles chaincode from the git "
"repository onto a peer in your BYFN network. The CLI container defaults "
"to using peer0 of org1:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:337
#, python-format
msgid ""
"2. Issue the `peer chaincode instantiate <http://hyperledger-"
"fabric.readthedocs.io/en/master/commands/peerchaincode.html?%20chaincode%20instantiate"
"#peer-chaincode-instantiate>`__ command to instantiate the chaincode on a"
" channel."
msgstr ""

#: ../../source/couchdb_tutorial.rst:342
msgid ""
"To instantiate the Marbles sample on the BYFN channel ``mychannel`` run "
"the following command:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:351
msgid "Verify index was deployed"
msgstr ""

#: ../../source/couchdb_tutorial.rst:353
msgid ""
"Indexes will be deployed to each peer's CouchDB state database once the "
"chaincode is both installed on the peer and instantiated on the channel. "
"You can verify that the CouchDB index was created successfully by "
"examining the peer log in the Docker container."
msgstr ""

#: ../../source/couchdb_tutorial.rst:360
msgid ""
"To view the logs in the peer docker container, open a new Terminal window"
" and run the following command to grep for message confirmation that the "
"index was created."
msgstr ""

#: ../../source/couchdb_tutorial.rst:369
msgid "You should see a result that looks like the following:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:375
msgid ""
"If Marbles was not installed on the BYFN peer ``peer0.org1.example.com``,"
" you may need to replace it with the name of a different peer where "
"Marbles was installed."
msgstr ""

#: ../../source/couchdb_tutorial.rst:382
msgid "Query the CouchDB State Database"
msgstr ""

#: ../../source/couchdb_tutorial.rst:384
msgid ""
"Now that the index has been defined in the JSON file and deployed "
"alongside the chaincode, chaincode functions can execute JSON queries "
"against the CouchDB state database, and thereby peer commands can invoke "
"the chaincode functions."
msgstr ""

#: ../../source/couchdb_tutorial.rst:388
msgid ""
"Specifying an index name on a query is optional. If not specified, and an"
" index already exists for the fields being queried, the existing index "
"will be automatically used."
msgstr ""

#: ../../source/couchdb_tutorial.rst:392
msgid ""
"It is a good practice to explicitly include an index name on a query "
"using the ``use_index`` keyword. Without it, CouchDB may pick a less "
"optimal index. Also CouchDB may not use an index at all and you may not "
"realize it, at the low volumes during testing. Only upon higher volumes "
"you may realize slow performance because CouchDB is not using an index "
"and you assumed it was."
msgstr ""

#: ../../source/couchdb_tutorial.rst:401
msgid "Build the query in chaincode"
msgstr ""

#: ../../source/couchdb_tutorial.rst:403
msgid ""
"You can perform complex rich queries against the chaincode data values "
"using the CouchDB JSON query language within chaincode. As we explored "
"above, the `marbles02 sample chaincode <https://github.com/hyperledger"
"/fabric-"
"samples/blob/master/chaincode/marbles02/go/marbles_chaincode.go>`__ "
"includes an index and rich queries are defined in the functions - "
"``queryMarbles`` and ``queryMarblesByOwner``:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:409
msgid "**queryMarbles** --"
msgstr ""

#: ../../source/couchdb_tutorial.rst:411
msgid ""
"Example of an **ad hoc rich query**. This is a query where a (selector) "
"string can be passed into the function. This query would be useful to "
"client applications that need to dynamically build their own selectors at"
" runtime. For more information on selectors refer to `CouchDB selector "
"syntax <http://docs.couchdb.org/en/latest/api/database/find.html#find-"
"selectors>`__."
msgstr ""

#: ../../source/couchdb_tutorial.rst:419
msgid "**queryMarblesByOwner** --"
msgstr ""

#: ../../source/couchdb_tutorial.rst:421
msgid ""
"Example of a parameterized query where the query logic is baked into the "
"chaincode. In this case the function accepts a single argument, the "
"marble owner. It then queries the state database for JSON documents "
"matching the docType of “marble” and the owner id using the JSON query "
"syntax."
msgstr ""

#: ../../source/couchdb_tutorial.rst:429
msgid "Run the query using the peer command"
msgstr ""

#: ../../source/couchdb_tutorial.rst:431
#, python-format
msgid ""
"In absence of a client application to test rich queries defined in "
"chaincode, peer commands can be used. Peer commands run from the command "
"line inside the docker container. We will customize the `peer chaincode "
"query <http://hyperledger-"
"fabric.readthedocs.io/en/master/commands/peerchaincode.html?%20chaincode%20query"
"#peer-chaincode-query>`__ command to use the Marbles index ``indexOwner``"
" and query for all marbles owned by \"tom\" using the ``queryMarbles`` "
"function."
msgstr ""

#: ../../source/couchdb_tutorial.rst:439
msgid ""
"Before querying the database, we should add some data. Run the following "
"command in the peer container to create a marble owned by \"tom\":"
msgstr ""

#: ../../source/couchdb_tutorial.rst:446
msgid ""
"After an index has been deployed during chaincode instantiation, it will "
"automatically be utilized by chaincode queries. CouchDB can determine "
"which index to use based on the fields being queried. If an index exists "
"for the query criteria it will be used. However the recommended approach "
"is to specify the ``use_index`` keyword on the query. The peer command "
"below is an example of how to specify the index explicitly in the "
"selector syntax by including the ``use_index`` keyword:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:459
msgid ""
"Delving into the query command above, there are three arguments of "
"interest:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:461
msgid "``queryMarbles``"
msgstr ""

#: ../../source/couchdb_tutorial.rst:462
msgid ""
"Name of the function in the Marbles chaincode. Notice a `shim "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim>`__ "
"``shim.ChaincodeStubInterface`` is used to access and modify the ledger. "
"The ``getQueryResultForQueryString()`` passes the queryString to the shim"
" API ``getQueryResult()``."
msgstr ""

#: ../../source/couchdb_tutorial.rst:485
msgid "``{\"selector\":{\"docType\":\"marble\",\"owner\":\"tom\"}``"
msgstr ""

#: ../../source/couchdb_tutorial.rst:486
msgid ""
"This is an example of an **ad hoc selector** string which finds all "
"documents of type ``marble`` where the ``owner`` attribute has a value of"
" ``tom``."
msgstr ""

#: ../../source/couchdb_tutorial.rst:490
msgid "``\"use_index\":[\"_design/indexOwnerDoc\", \"indexOwner\"]``"
msgstr ""

#: ../../source/couchdb_tutorial.rst:491
msgid ""
"Specifies both the design doc name  ``indexOwnerDoc`` and index name "
"``indexOwner``. In this example the selector query explicitly includes "
"the index name, specified by using the ``use_index`` keyword. Recalling "
"the index definition above :ref:`cdb-create-index`, it contains a design "
"doc, ``\"ddoc\":\"indexOwnerDoc\"``. With CouchDB, if you plan to "
"explicitly include the index name on the query, then the index definition"
" must include the ``ddoc`` value, so it can be referenced with the "
"``use_index`` keyword."
msgstr ""

#: ../../source/couchdb_tutorial.rst:500
msgid ""
"The query runs successfully and the index is leveraged with the following"
" results:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:509
msgid "Use best practices for queries and indexes"
msgstr ""

#: ../../source/couchdb_tutorial.rst:511
msgid ""
"Queries that use indexes will complete faster, without having to scan the"
" full database in couchDB. Understanding indexes will allow you to write "
"your queries for better performance and help your application handle "
"larger amounts of data or blocks on your network."
msgstr ""

#: ../../source/couchdb_tutorial.rst:516
msgid ""
"It is also important to plan the indexes you install with your chaincode."
" You should install only a few indexes per chaincode that support most of"
" your queries. Adding too many indexes, or using an excessive number of "
"fields in an index, will degrade the performance of your network. This is"
" because the indexes are updated after each block is committed. The more "
"indexes need to be updated through \"index warming\", the longer it will "
"take for transactions to complete."
msgstr ""

#: ../../source/couchdb_tutorial.rst:523
msgid ""
"The examples in this section will help demonstrate how queries use "
"indexes and what type of queries will have the best performance. Remember"
" the following when writing your queries:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:527
msgid ""
"All fields in the index must also be in the selector or sort sections of "
"your query for the index to be used."
msgstr ""

#: ../../source/couchdb_tutorial.rst:529
msgid ""
"More complex queries will have a lower performance and will be less "
"likely to use an index."
msgstr ""

#: ../../source/couchdb_tutorial.rst:531
msgid ""
"You should try to avoid operators that will result in a full table scan "
"or a full index scan such as ``$or``, ``$in`` and ``$regex``."
msgstr ""

#: ../../source/couchdb_tutorial.rst:534
msgid ""
"In the previous section of this tutorial, you issued the following query "
"against the marbles chaincode:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:542
msgid "The marbles chaincode was installed with the ``indexOwnerDoc`` index:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:548
msgid ""
"Notice that both the fields in the query, ``docType`` and ``owner``, are "
"included in the index, making it a fully supported query. As a result "
"this query will be able to use the data in the index, without having to "
"search the full database. Fully supported queries such as this one will "
"return faster than other queries from your chaincode."
msgstr ""

#: ../../source/couchdb_tutorial.rst:554
msgid ""
"If you add extra fields to the query above, it will still use the index. "
"However, the query will additionally have to scan the indexed data for "
"the extra fields, resulting in a longer response time. As an example, the"
" query below will still use the index, but will take a longer time to "
"return than the previous example."
msgstr ""

#: ../../source/couchdb_tutorial.rst:565
msgid ""
"A query that does not include all fields in the index will have to scan "
"the full database instead. For example, the query below searches for the "
"owner, without specifying the the type of item owned. Since the "
"ownerIndexDoc contains both the ``owner`` and ``docType`` fields, this "
"query will not be able to use the index."
msgstr ""

#: ../../source/couchdb_tutorial.rst:576
msgid ""
"In general, more complex queries will have a longer response time, and "
"have a lower chance of being supported by an index. Operators such as "
"``$or``, ``$in``, and ``$regex`` will often cause the query to scan the "
"full index or not use the index at all."
msgstr ""

#: ../../source/couchdb_tutorial.rst:581
msgid ""
"As an example, the query below contains an ``$or`` term that will search "
"for every marble and every item owned by tom."
msgstr ""

#: ../../source/couchdb_tutorial.rst:589
msgid ""
"This query will still use the index because it searches for fields that "
"are included in ``indexOwnerDoc``. However, the ``$or`` condition in the "
"query requires a scan of all the items in the index, resulting in a "
"longer response time."
msgstr ""

#: ../../source/couchdb_tutorial.rst:594
msgid "Below is an example of a complex query that is not supported by the index."
msgstr ""

#: ../../source/couchdb_tutorial.rst:601
msgid ""
"The query searches for all marbles owned by tom or any other items that "
"are yellow. This query will not use the index because it will need to "
"search the entire table to meet the ``$or`` condition. Depending the "
"amount of data on your ledger, this query will take a long time to "
"respond or may timeout."
msgstr ""

#: ../../source/couchdb_tutorial.rst:606
msgid ""
"While it is important to follow best practices with your queries, using "
"indexes is not a solution for collecting large amounts of data. The "
"blockchain data structure is optimized to validate and confirm "
"transactions, and is not suited for data analytics or reporting. If you "
"want to build a dashboard as part of your application or analyze the data"
" from your network, the best practice is to query an off chain database "
"that replicates the data from your peers. This will allow you to "
"understand the data on the blockchain without degrading the performance "
"of your network or disrupting transactions."
msgstr ""

#: ../../source/couchdb_tutorial.rst:615
msgid ""
"You can use block or chaincode events from your application to write "
"transaction data to an off-chain database or analytics engine. For each "
"block received, the block listener application would iterate through the "
"block transactions and build a data store using the key/value writes from"
" each valid transaction's ``rwset``. The :doc:`peer_event_services` "
"provide replayable events to ensure the integrity of downstream data "
"stores."
msgstr ""

#: ../../source/couchdb_tutorial.rst:625
msgid "Query the CouchDB State Database With Pagination"
msgstr ""

#: ../../source/couchdb_tutorial.rst:627
msgid ""
"When large result sets are returned by CouchDB queries, a set of APIs is "
"available which can be called by chaincode to paginate the list of "
"results. Pagination provides a mechanism to partition the result set by "
"specifying a ``pagesize`` and a start point -- a ``bookmark`` which "
"indicates where to begin the result set. The client application "
"iteratively invokes the chaincode that executes the query until no more "
"results are returned. For more information refer to this `topic on "
"pagination with CouchDB <http://hyperledger-"
"fabric.readthedocs.io/en/master/couchdb_as_state_database.html#couchdb-"
"pagination>`__."
msgstr ""

#: ../../source/couchdb_tutorial.rst:636
msgid ""
"We will use the  `Marbles sample <https://github.com/hyperledger/fabric-"
"samples/blob/master/chaincode/marbles02/go/marbles_chaincode.go>`__ "
"function ``queryMarblesWithPagination`` to  demonstrate how pagination "
"can be implemented in chaincode and the client application."
msgstr ""

#: ../../source/couchdb_tutorial.rst:640
msgid "**queryMarblesWithPagination** --"
msgstr ""

#: ../../source/couchdb_tutorial.rst:642
msgid ""
"Example of an **ad hoc rich query with pagination**. This is a query "
"where a (selector) string can be passed into the function similar to the "
"above example.  In this case, a ``pageSize`` is also included with the "
"query as well as a ``bookmark``."
msgstr ""

#: ../../source/couchdb_tutorial.rst:647
msgid ""
"In order to demonstrate pagination, more data is required. This example "
"assumes that you have already added marble1 from above. Run the following"
" commands in the peer container to create four more marbles owned by "
"\"tom\", to create a total of five marbles owned by \"tom\":"
msgstr ""

#: ../../source/couchdb_tutorial.rst:661
msgid ""
"In addition to the arguments for the query in the previous example, "
"queryMarblesWithPagination adds ``pagesize`` and ``bookmark``. "
"``PageSize`` specifies the number of records to return per query.  The "
"``bookmark`` is an \"anchor\" telling couchDB where to begin the page. "
"(Each page of results returns a unique bookmark.)"
msgstr ""

#: ../../source/couchdb_tutorial.rst:667
msgid "``queryMarblesWithPagination``"
msgstr ""

#: ../../source/couchdb_tutorial.rst:668
msgid ""
"Name of the function in the Marbles chaincode. Notice a `shim "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim>`__ "
"``shim.ChaincodeStubInterface`` is used to access and modify the ledger. "
"The ``getQueryResultForQueryStringWithPagination()`` passes the "
"queryString along"
msgstr ""

#: ../../source/couchdb_tutorial.rst:671
msgid ""
"with the pagesize and bookmark to the shim API "
"``GetQueryResultWithPagination()``."
msgstr ""

#: ../../source/couchdb_tutorial.rst:699
msgid ""
"The following example is a peer command which calls "
"queryMarblesWithPagination with a pageSize of ``3`` and no bookmark "
"specified."
msgstr ""

#: ../../source/couchdb_tutorial.rst:702
msgid ""
"When no bookmark is specified, the query starts with the \"first\" page "
"of records."
msgstr ""

#: ../../source/couchdb_tutorial.rst:712
msgid ""
"The following response is received (carriage returns added for clarity), "
"three of the five marbles are returned because the ``pagsize`` was set to"
" ``3``:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:723
msgid ""
"Bookmarks are uniquely generated by CouchDB for each query and represent "
"a placeholder in the result set. Pass the returned bookmark on the "
"subsequent iteration of the query to retrieve the next set of results."
msgstr ""

#: ../../source/couchdb_tutorial.rst:728
msgid ""
"The following is a peer command to call queryMarblesWithPagination with a"
" pageSize of ``3``. Notice this time, the query includes the bookmark "
"returned from the previous query."
msgstr ""

#: ../../source/couchdb_tutorial.rst:738
msgid ""
"The following response is received (carriage returns added for clarity)."
"  The last two records are retrieved:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:748
msgid ""
"The final command is a peer command to call queryMarblesWithPagination "
"with a pageSize of ``3`` and with the bookmark from the previous query."
msgstr ""

#: ../../source/couchdb_tutorial.rst:757
msgid ""
"The following response is received (carriage returns added for clarity). "
"No records are returned, indicating that all pages have been retrieved:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:766
msgid ""
"For an example of how a client application can iterate over the result "
"sets using pagination, search for the "
"``getQueryResultForQueryStringWithPagination`` function in the `Marbles "
"sample <https://github.com/hyperledger/fabric-"
"samples/blob/master/chaincode/marbles02/go/marbles_chaincode.go>`__."
msgstr ""

#: ../../source/couchdb_tutorial.rst:773
msgid "Update an Index"
msgstr ""

#: ../../source/couchdb_tutorial.rst:775
msgid ""
"It may be necessary to update an index over time. The same index may "
"exist in subsequent versions of the chaincode that gets installed. In "
"order for an index to be updated, the original index definition must have"
" included the design document ``ddoc`` attribute and an index name. To "
"update an index definition, use the same index name but alter the index "
"definition. Simply edit the index JSON file and add or remove fields from"
" the index. Fabric only supports the index type JSON, changing the index "
"type is not supported. The updated index definition gets redeployed to "
"the peer’s state database when the chaincode is installed and "
"instantiated. Changes to the index name or ``ddoc`` attributes will "
"result in a new index being created and the original index remains "
"unchanged in CouchDB until it is removed."
msgstr ""

#: ../../source/couchdb_tutorial.rst:787
msgid ""
"If the state database has a significant volume of data, it will take some"
" time for the index to be re-built, during which time chaincode invokes "
"that issue queries may fail or timeout."
msgstr ""

#: ../../source/couchdb_tutorial.rst:792
msgid "Iterating on your index definition"
msgstr ""

#: ../../source/couchdb_tutorial.rst:794
msgid ""
"If you have access to your peer's CouchDB state database in a development"
" environment, you can iteratively test various indexes in support of your"
" chaincode queries. Any changes to chaincode though would require "
"redeployment. Use the `CouchDB Fauxton interface "
"<http://docs.couchdb.org/en/latest/fauxton/index.html>`__ or a command "
"line curl utility to create and update indexes."
msgstr ""

#: ../../source/couchdb_tutorial.rst:800
msgid ""
"The Fauxton interface is a web UI for the creation, update, and "
"deployment of indexes to CouchDB. If you want to try out this interface, "
"there is an example of the format of the Fauxton version of the index in "
"Marbles sample. If you have deployed the BYFN network with CouchDB, the "
"Fauxton interface can be loaded by opening a browser and navigating to "
"``http://localhost:5984/_utils``."
msgstr ""

#: ../../source/couchdb_tutorial.rst:807
msgid ""
"Alternatively, if you prefer not use the Fauxton UI, the following is an "
"example of a curl command which can be used to create the index on the "
"database ``mychannel_marbles``:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:811
msgid ""
"// Index for docType, owner. // Example curl command line to define index"
" in the CouchDB channel_chaincode database"
msgstr ""

#: ../../source/couchdb_tutorial.rst:822
msgid ""
"If you are using BYFN configured with CouchDB, replace hostname:port with"
" ``localhost:5984``."
msgstr ""

#: ../../source/couchdb_tutorial.rst:828
msgid "Delete an Index"
msgstr ""

#: ../../source/couchdb_tutorial.rst:830
msgid ""
"Index deletion is not managed by Fabric tooling. If you need to delete an"
" index, manually issue a curl command against the database or delete it "
"using the Fauxton interface."
msgstr ""

#: ../../source/couchdb_tutorial.rst:834
msgid "The format of the curl command to delete an index would be:"
msgstr ""

#: ../../source/couchdb_tutorial.rst:841
msgid "To delete the index used in this tutorial, the curl command would be:"
msgstr ""

