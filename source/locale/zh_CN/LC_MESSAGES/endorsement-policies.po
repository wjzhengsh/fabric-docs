# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-16 11:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/endorsement-policies.rst:2
msgid "Endorsement policies"
msgstr ""

#: ../../source/endorsement-policies.rst:4
msgid ""
"Every chaincode has an endorsement policy which specifies the set of "
"peers on a channel that must execute chaincode and endorse the execution "
"results in order for the transaction to be considered valid. These "
"endorsement policies define the organizations (through their peers) who "
"must \"endorse\" (i.e., approve of) the execution of a proposal."
msgstr ""

#: ../../source/endorsement-policies.rst:10
msgid ""
"Recall that **state**, represented by key-value pairs, is separate from "
"blockchain data. For more on this, check out our :doc:`ledger/ledger` "
"documentation."
msgstr ""

#: ../../source/endorsement-policies.rst:14
msgid ""
"As part of the transaction validation step performed by the peers, each "
"validating peer checks to make sure that the transaction contains the "
"appropriate **number** of endorsements and that they are from the "
"expected sources (both of these are specified in the endorsement policy)."
" The endorsements are also checked to make sure they're valid (i.e., that"
" they are valid signatures from valid certificates)."
msgstr ""

#: ../../source/endorsement-policies.rst:21
msgid "Two ways to require endorsement"
msgstr ""

#: ../../source/endorsement-policies.rst:23
msgid ""
"By default, endorsement policies are specified for a channel's chaincode "
"at instantiation or upgrade time (that is, one endorsement policy covers "
"all of the state associated with a chaincode)."
msgstr ""

#: ../../source/endorsement-policies.rst:27
msgid ""
"However, there are cases where it may be necessary for a particular state"
" (a particular key-value pair, in other words) to have a different "
"endorsement policy. This **state-based endorsement** allows the default "
"chaincode-level endorsement policies to be overridden by a different "
"policy for the specified keys."
msgstr ""

#: ../../source/endorsement-policies.rst:32
msgid ""
"To illustrate the circumstances in which these two types of endorsement "
"policies might be used, consider a channel on which cars are being "
"exchanged. The \"creation\" --- also known as \"issuance\" -- of a car as"
" an asset that can be traded (putting the key-value pair that represents "
"it into the world state, in other words) would have to satisfy the "
"chaincode-level endorsement policy. To see how to set a chaincode-level "
"endorsement policy, check out the section below."
msgstr ""

#: ../../source/endorsement-policies.rst:39
msgid ""
"If the car requires a specific endorsement policy, it can be defined "
"either when the car is created or afterwards. There are a number of "
"reasons why it might be necessary or preferable to set a state-specific "
"endorsement policy. The car might have historical importance or value "
"that makes it necessary to have the endorsement of a licensed appraiser. "
"Also, the owner of the car (if they're a member of the channel) might "
"also want to ensure that their peer signs off on a transaction. In both "
"cases, **an endorsement policy is required for a particular asset that is"
" different from the default endorsement policies for the other assets "
"associated with that chaincode.**"
msgstr ""

#: ../../source/endorsement-policies.rst:49
msgid ""
"We'll show you how to define a state-based endorsement policy in a "
"subsequent section. But first, let's see how we set a chaincode-level "
"endorsement policy."
msgstr ""

#: ../../source/endorsement-policies.rst:53
msgid "Setting chaincode-level endorsement policies"
msgstr ""

#: ../../source/endorsement-policies.rst:55
msgid ""
"Chaincode-level endorsement policies can be specified at instantiate time"
" using either the SDK (for some sample code on how to do this, click "
"`here <https://github.com/hyperledger/fabric-sdk-"
"node/blob/f8ffa90dc1b61a4a60a6fa25de760c647587b788/test/integration/e2e/e2eUtils.js#L178>`_)"
" or in the peer CLI using the ``-P`` switch followed by the policy."
msgstr ""

#: ../../source/endorsement-policies.rst:60
msgid ""
"Don't worry about the policy syntax (``'Org1.member'``, et all) right "
"now. We'll talk more about the syntax in the next section."
msgstr ""

#: ../../source/endorsement-policies.rst:63
#: ../../source/endorsement-policies.rst:76
#: ../../source/endorsement-policies.rst:130
msgid "For example:"
msgstr ""

#: ../../source/endorsement-policies.rst:69
msgid ""
"This command deploys chaincode ``mycc`` (\"my chaincode\") with the "
"policy ``AND('Org1.member', 'Org2.member')`` which would require that a "
"member of both Org1 and Org2 sign the transaction."
msgstr ""

#: ../../source/endorsement-policies.rst:73
msgid ""
"Notice that, if the identity classification is enabled (see :doc:`msp`), "
"one can use the ``PEER`` role to restrict endorsement to only peers."
msgstr ""

#: ../../source/endorsement-policies.rst:82
msgid ""
"A new organization added to the channel after instantiation can query a "
"chaincode (provided the query has appropriate authorization as defined by"
" channel policies and any application level checks enforced by the "
"chaincode) but will not be able to execute or endorse the chaincode. The "
"endorsement policy needs to be modified to allow transactions to be "
"committed with endorsements from the new organization."
msgstr ""

#: ../../source/endorsement-policies.rst:88
msgid ""
"if not specified at instantiation time, the endorsement policy defaults "
"to \"any member of the organizations in the channel\". For example, a "
"channel with \"Org1\" and \"Org2\" would have a default endorsement "
"policy of \"OR('Org1.member', 'Org2.member')\"."
msgstr ""

#: ../../source/endorsement-policies.rst:94
msgid "Endorsement policy syntax"
msgstr ""

#: ../../source/endorsement-policies.rst:96
msgid ""
"As you can see above, policies are expressed in terms of principals "
"(\"principals\" are identities matched to a role). Principals are "
"described as ``'MSP.ROLE'``, where ``MSP`` represents the required MSP ID"
" and ``ROLE`` represents one of the four accepted roles: ``member``, "
"``admin``, ``client``, and ``peer``."
msgstr ""

#: ../../source/endorsement-policies.rst:102
msgid "Here are a few examples of valid principals:"
msgstr ""

#: ../../source/endorsement-policies.rst:104
msgid "``'Org0.admin'``: any administrator of the ``Org0`` MSP"
msgstr ""

#: ../../source/endorsement-policies.rst:105
msgid "``'Org1.member'``: any member of the ``Org1`` MSP"
msgstr ""

#: ../../source/endorsement-policies.rst:106
msgid "``'Org1.client'``: any client of the ``Org1`` MSP"
msgstr ""

#: ../../source/endorsement-policies.rst:107
msgid "``'Org1.peer'``: any peer of the ``Org1`` MSP"
msgstr ""

#: ../../source/endorsement-policies.rst:109
msgid "The syntax of the language is:"
msgstr ""

#: ../../source/endorsement-policies.rst:111
msgid "``EXPR(E[, E...])``"
msgstr ""

#: ../../source/endorsement-policies.rst:113
msgid ""
"Where ``EXPR`` is either ``AND``, ``OR``, or ``OutOf``, and ``E`` is "
"either a principal (with the syntax described above) or another nested "
"call to ``EXPR``."
msgstr ""

#: ../../source/endorsement-policies.rst:117
msgid ""
"``AND('Org1.member', 'Org2.member', 'Org3.member')`` requests one "
"signature from each of the three principals."
msgstr ""

#: ../../source/endorsement-policies.rst:119
msgid ""
"``OR('Org1.member', 'Org2.member')`` requests one signature from either "
"one of the two principals."
msgstr ""

#: ../../source/endorsement-policies.rst:121
msgid ""
"``OR('Org1.member', AND('Org2.member', 'Org3.member'))`` requests either "
"one signature from a member of the ``Org1`` MSP or one signature from a "
"member of the ``Org2`` MSP and one signature from a member of the "
"``Org3`` MSP."
msgstr ""

#: ../../source/endorsement-policies.rst:124
msgid ""
"``OutOf(1, 'Org1.member', 'Org2.member')``, which resolves to the same "
"thing as ``OR('Org1.member', 'Org2.member')``."
msgstr ""

#: ../../source/endorsement-policies.rst:126
msgid ""
"Similarly, ``OutOf(2, 'Org1.member', 'Org2.member')`` is equivalent to "
"``AND('Org1.member', 'Org2.member')``, and ``OutOf(2, 'Org1.member', "
"'Org2.member', 'Org3.member')`` is equivalent to ``OR(AND('Org1.member', "
"'Org2.member'), AND('Org1.member', 'Org3.member'), AND('Org2.member', "
"'Org3.member'))``."
msgstr ""

#: ../../source/endorsement-policies.rst:135
msgid "Setting key-level endorsement policies"
msgstr ""

#: ../../source/endorsement-policies.rst:137
msgid ""
"Setting regular chaincode-level endorsement policies is tied to the "
"lifecycle of the corresponding chaincode. They can only be set or "
"modified when instantiating or upgrading the corresponding chaincode on a"
" channel."
msgstr ""

#: ../../source/endorsement-policies.rst:141
msgid ""
"In contrast, key-level endorsement policies can be set and modified in a "
"more granular fashion from within a chaincode. The modification is part "
"of the read-write set of a regular transaction."
msgstr ""

#: ../../source/endorsement-policies.rst:145
msgid ""
"The shim API provides the following functions to set and retrieve an "
"endorsement policy for/from a regular key."
msgstr ""

#: ../../source/endorsement-policies.rst:148
msgid ""
"``ep`` below stands for the \"endorsement policy\", which can be "
"expressed either by using the same syntax described above or by using the"
" convenience function described below. Either method will generate a "
"binary version of the endorsement policy that can be consumed by the "
"basic shim API."
msgstr ""

#: ../../source/endorsement-policies.rst:159
msgid ""
"For keys that are part of :doc:`private-data/private-data` in a "
"collection the following functions apply:"
msgstr ""

#: ../../source/endorsement-policies.rst:167
msgid ""
"To help set endorsement policies and marshal them into validation "
"parameter byte arrays, the Go shim provides an extension with convenience"
" functions that allow the chaincode developer to deal with endorsement "
"policies in terms of the MSP identifiers of organizations, see "
"`KeyEndorsementPolicy "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim/ext/statebased#KeyEndorsementPolicy>`_:"
msgstr ""

#: ../../source/endorsement-policies.rst:190
msgid ""
"For example, to set an endorsement policy for a key where two specific "
"orgs are required to endorse the key change, pass both org ``MSPIDs`` to "
"``AddOrgs()``, and then call ``Policy()`` to construct the endorsement "
"policy byte array that can be passed to "
"``SetStateValidationParameter()``."
msgstr ""

#: ../../source/endorsement-policies.rst:195
msgid ""
"To add the shim extension to your chaincode as a dependency, see "
":ref:`vendoring`."
msgstr ""

#: ../../source/endorsement-policies.rst:198
#: ../../source/endorsement-policies.rst:205
msgid "Validation"
msgstr ""

#: ../../source/endorsement-policies.rst:200
msgid ""
"At commit time, setting a value of a key is no different from setting the"
" endorsement policy of a key --- both update the state of the key and are"
" validated based on the same rules."
msgstr ""

#: ../../source/endorsement-policies.rst:205
msgid "no validation parameter set"
msgstr ""

#: ../../source/endorsement-policies.rst:205
msgid "validation parameter set"
msgstr ""

#: ../../source/endorsement-policies.rst:207
msgid "modify value"
msgstr ""

#: ../../source/endorsement-policies.rst:207
#: ../../source/endorsement-policies.rst:209
msgid "check chaincode ep"
msgstr ""

#: ../../source/endorsement-policies.rst:207
#: ../../source/endorsement-policies.rst:209
msgid "check key-level ep"
msgstr ""

#: ../../source/endorsement-policies.rst:209
msgid "modify key-level ep"
msgstr ""

#: ../../source/endorsement-policies.rst:212
msgid ""
"As we discussed above, if a key is modified and no key-level endorsement "
"policy is present, the chaincode-level endorsement policy applies by "
"default. This is also true when a key-level endorsement policy is set for"
" a key for the first time --- the new key-level endorsement policy must "
"first be endorsed according to the pre-existing chaincode-level "
"endorsement policy."
msgstr ""

#: ../../source/endorsement-policies.rst:218
msgid ""
"If a key is modified and a key-level endorsement policy is present, the "
"key-level endorsement policy overrides the chaincode-level endorsement "
"policy. In practice, this means that the key-level endorsement policy can"
" be either less restrictive or more restrictive than the chaincode-level "
"endorsement policy. Because the chaincode-level endorsement policy must "
"be satisfied in order to set a key-level endorsement policy for the first"
" time, no trust assumptions have been violated."
msgstr ""

#: ../../source/endorsement-policies.rst:225
msgid ""
"If a key's endorsement policy is removed (set to nil), the chaincode-"
"level endorsement policy becomes the default again."
msgstr ""

#: ../../source/endorsement-policies.rst:228
msgid ""
"If a transaction modifies multiple keys with different associated key-"
"level endorsement policies, all of these policies need to be satisfied in"
" order for the transaction to be valid."
msgstr ""

